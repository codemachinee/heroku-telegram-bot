# –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–∞–º–∏
import gspread
import openai
# –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
from datetime import datetime
# –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–Ω–¥–æ–º–∞
from random import *
from paswords import *

saved_messages_davinci = []
saved_messages_artur = []

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
def value_plus_one(j):
    gc = gspread.service_account(filename='pidor-of-the-day-af3dd140b860.json')
    sh = gc.open("bot_statistic")
    worksheet = sh.get_worksheet(0)
    worksheet.update(j, str(int(worksheet.acell(j).value) + 1))


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
def pstat(cell):
    gc = gspread.service_account(filename='pidor-of-the-day-af3dd140b860.json')
    sh = gc.open("bot_statistic")
    worksheet = sh.get_worksheet(0)
    d1 = [(int(worksheet.acell(f'{cell}1').value), "–§–∏–ª—á"), (int(worksheet.acell(f'{cell}2').value), "–ò–≥–æ—Ä—å"),
          (int(worksheet.acell(f'{cell}3').value), "–°–µ—Ä–µ–≥–∞"), (int(worksheet.acell(f'{cell}4').value), "–°–∞–Ω—è"),
          (int(worksheet.acell(f'{cell}5').value), "–õ–µ—Ö–∞(–°–∞–Ω—è)"), (int(worksheet.acell(f'{cell}6').value), "–õ–µ—Ö–∞(–§–∏—Ç–∏–ª—å)"),
          (int(worksheet.acell(f'{cell}7').value), "–î–∏–º–∞–Ω"), (int(worksheet.acell(f'{cell}8').value), "–ö–∏—Ä—é—Ö–∞ –ø–æ–¥–∫–∞—Å—Ç–µ—Ä"),
          (int(worksheet.acell(f'{cell}9').value), "–ñ–µ–Ω–µ–∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å")]
    d1_sort = sorted(d1, reverse=True)
    return (f'''–†–ï–ô–¢–ò–ù–ì –ü–ò–î–ê–†–ê–°–û–í:

1. {d1_sort[0][1]} -----> {d1_sort[0][0]} —Ä–∞–∑(–∞)
2. {d1_sort[1][1]} -----> {d1_sort[1][0]} —Ä–∞–∑(–∞)
3. {d1_sort[2][1]} -----> {d1_sort[2][0]} —Ä–∞–∑(–∞)
4. {d1_sort[3][1]} -----> {d1_sort[3][0]} —Ä–∞–∑(–∞)
5. {d1_sort[4][1]} -----> {d1_sort[4][0]} —Ä–∞–∑(–∞)
6. {d1_sort[5][1]} -----> {d1_sort[5][0]} —Ä–∞–∑(–∞)
7. {d1_sort[6][1]} -----> {d1_sort[6][0]} —Ä–∞–∑(–∞)
8. {d1_sort[7][1]} -----> {d1_sort[7][0]} —Ä–∞–∑(–∞)
9. {d1_sort[8][1]} -----> {d1_sort[8][0]} —Ä–∞–∑(–∞)

–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –Ω–∞—à —á–µ–º–ø–∏–æ–Ω {d1_sort[0][1]}! –ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ 
–º–æ–∂–µ—Ç –ø–æ–∑–∞–≤–∏–¥–æ–≤–∞—Ç—å –≠–ª—Ç–æ–Ω –î–∂–æ–Ω –∏ –¥—Ä—É–≥–∏–µ –í–µ–ª–∏–∫–∏–µ. –ü–æ–∂–µ–ª–∞–µ–º
–µ–º—É –∑–¥–æ—Ä–æ–≤—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –Ω–æ–≤—ã–π—Ö –ø–æ–±–µ–¥.

/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É''')


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω—É–ª—è—é—â–∞—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
def obnulenie_stat(bot):
    if datetime.now().day == 1:
        gc = gspread.service_account(filename='pidor-of-the-day-af3dd140b860.json')
        sh = gc.open("bot_statistic")
        worksheet = sh.get_worksheet(0)
        d1 = [(int(worksheet.acell('A1').value), "–§–∏–ª—á"), (int(worksheet.acell('A2').value), "–ò–≥–æ—Ä—å"),
              (int(worksheet.acell('A3').value), "–°–µ—Ä–µ–≥–∞"), (int(worksheet.acell('A4').value), "–°–∞–Ω—è"),
              (int(worksheet.acell('A5').value), "–õ–µ—Ö–∞(–°–∞–Ω—è)"), (int(worksheet.acell('A6').value), "–õ–µ—Ö–∞(–§–∏—Ç–∏–ª—å)"),
              (int(worksheet.acell('A7').value), "–î–∏–º–∞–Ω"), (int(worksheet.acell('A8').value), "–ö–∏—Ä—é—Ö–∞ –ø–æ–¥–∫–∞—Å—Ç–µ—Ä"),
              (int(worksheet.acell('A9').value), "–ñ–µ–Ω–µ–∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å")]
        d1_sort = sorted(d1, reverse=True)
        cell = worksheet.find(d1_sort[0][1], in_column=2)
        worksheet.update(f'C{cell.row}', f'{int(worksheet.acell(f"C{cell.row}").value) + 1}')
        worksheet.update('A1:A9', [[0], [0], [0], [0], [0], [0], [0], [0], [0]])
        bot.send_message(group_id, f'''–ò–¢–û–ì–ò –ú–ï–°–Ø–¶–ê:

        1. {d1_sort[0][1]} -----> {d1_sort[0][0]} —Ä–∞–∑(–∞) üéâüéâüéâ –ß–ï–ú–ü–ò–û–ù!!!
        2. {d1_sort[1][1]} -----> {d1_sort[1][0]} —Ä–∞–∑(–∞)
        3. {d1_sort[2][1]} -----> {d1_sort[2][0]} —Ä–∞–∑(–∞)
        4. {d1_sort[3][1]} -----> {d1_sort[3][0]} —Ä–∞–∑(–∞)
        5. {d1_sort[4][1]} -----> {d1_sort[4][0]} —Ä–∞–∑(–∞)
        6. {d1_sort[5][1]} -----> {d1_sort[5][0]} —Ä–∞–∑(–∞)
        7. {d1_sort[6][1]} -----> {d1_sort[6][0]} —Ä–∞–∑(–∞)
        8. {d1_sort[7][1]} -----> {d1_sort[7][0]} —Ä–∞–∑(–∞)
        9. {d1_sort[8][1]} -----> {d1_sort[8][0]} —Ä–∞–∑(–∞)

        –î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –Ω–∞—à —á–µ–º–ø–∏–æ–Ω –º–µ—Å—è—Ü–∞ {d1_sort[0][1]}! –í —Ç—è–∂–µ–ª–µ–π—à–µ–π –±–æ—Ä—å–±–µ –æ–Ω —Ç–∞–∫–∏ –≤—ã—Ä–≤–∞–ª —Å–≤–æ—é –∑–∞—Å–ª—É–∂–µ–Ω–Ω—É—é –ø–æ–±–µ–¥—É.
        –ü–æ–∂–µ–ª–∞–µ–º –µ–º—É –∑–¥–æ—Ä–æ–≤—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥.''')
    if datetime.now().day == 31 and datetime.now().month == 12:
        gc = gspread.service_account(filename='pidor-of-the-day-af3dd140b860.json')
        sh = gc.open("bot_statistic")
        worksheet = sh.get_worksheet(0)
        d1 = [(int(worksheet.acell('C1').value), "–§–∏–ª—á"), (int(worksheet.acell('C2').value), "–ò–≥–æ—Ä—å"),
              (int(worksheet.acell('C3').value), "–°–µ—Ä–µ–≥–∞"), (int(worksheet.acell('C4').value), "–°–∞–Ω—è"),
              (int(worksheet.acell('C5').value), "–õ–µ—Ö–∞(–°–∞–Ω—è)"), (int(worksheet.acell('C6').value), "–õ–µ—Ö–∞(–§–∏—Ç–∏–ª—å)"),
              (int(worksheet.acell('C7').value), "–î–∏–º–∞–Ω"), (int(worksheet.acell('C8').value), "–ö–∏—Ä—é—Ö–∞ –ø–æ–¥–∫–∞—Å—Ç–µ—Ä"),
              (int(worksheet.acell('C9').value), "–ñ–µ–Ω–µ–∫ —Å–ø–∞—Å–∞—Ç–µ–ª—å")]
        d1_sort = sorted(d1, reverse=True)
        cell = worksheet.find(d1_sort[0][1], in_column=2)
        worksheet.update(f'D{cell.row}', f'{int(worksheet.acell(f"D{cell.row}").value) + 1}')
        worksheet.update('A1:A9', [[0], [0], [0], [0], [0], [0], [0], [0], [0]])
        worksheet.update('C1:C9', [[0], [0], [0], [0], [0], [0], [0], [0], [0]])
        bot.send_message(group_id, f'''–ò–¢–û–ì–ò –ì–û–î–ê:

                1. {d1_sort[0][1]} -----> {d1_sort[0][0]} —Ä–∞–∑(–∞) üéâüéâüéâ –ß–ï–ú–ü–ò–û–ù!!!
                2. {d1_sort[1][1]} -----> {d1_sort[1][0]} —Ä–∞–∑(–∞)
                3. {d1_sort[2][1]} -----> {d1_sort[2][0]} —Ä–∞–∑(–∞)
                4. {d1_sort[3][1]} -----> {d1_sort[3][0]} —Ä–∞–∑(–∞)
                5. {d1_sort[4][1]} -----> {d1_sort[4][0]} —Ä–∞–∑(–∞)
                6. {d1_sort[5][1]} -----> {d1_sort[5][0]} —Ä–∞–∑(–∞)
                7. {d1_sort[6][1]} -----> {d1_sort[6][0]} —Ä–∞–∑(–∞)
                8. {d1_sort[7][1]} -----> {d1_sort[7][0]} —Ä–∞–∑(–∞)
                9. {d1_sort[8][1]} -----> {d1_sort[8][0]} —Ä–∞–∑(–∞)

                –î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –Ω–∞—à –ü–ò–î–ê–†–ê–° –≥–æ–¥–∞ {d1_sort[0][1]}! –í —Ç—è–∂–µ–ª–µ–π—à–µ–π –±–æ—Ä—å–±–µ –æ–Ω —Ç–∞–∫–∏ –≤—ã—Ä–≤–∞–ª —Å–≤–æ—é –∑–∞—Å–ª—É–∂–µ–Ω–Ω—É—é –ø–æ–±–µ–¥—É.
                –ü–æ–∂–µ–ª–∞–µ–º –µ–º—É –∑–¥–æ—Ä–æ–≤—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥.''')
    else:
        pass


def celebrate_day():
    if datetime.now().day == 31 and datetime.now().month == 12:
        return 'üéâ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 7 and datetime.now().month == 1:
        return 'üéâ–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 14 and datetime.now().month == 1:
        return 'üéâ–°—Ç–∞—Ä–æ–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 14 and datetime.now().month == 2:
        return 'üéâ–õ–∏—á–Ω—ã–º –ø–∏–¥–∞—Ä–∞—Å–æ–º –í–∞–ª–µ–Ω—Ç–∏–Ω–∞üéâ'
    elif datetime.now().day == 23 and datetime.now().month == 2:
        return 'üéâ–ó–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 8 and datetime.now().month == 3:
        return 'üéâ–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 1 and datetime.now().month == 5:
        return 'üéâ–ú–∏—Ä–Ω—ã–º —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–º –∏ –º–∞–π—Å–∫–∏–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 1 and datetime.now().month == 9:
        return 'üéâ–®–∫–æ–ª—å–Ω—ã–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    elif datetime.now().day == 4 and datetime.now().month == 11:
        return 'üéâ–ù–∞—Ä–æ–¥–Ω—ã–º –ø–∏–¥–∞—Ä–∞—Å–æ–ºüéâ'
    else:
        return '–ü–∏–¥–∞—Ä–∞—Å–æ–º –¥–Ω—è'



# —Ñ—É–Ω–∫—Ü–∏—è —à–∞—Ä–∞ —Å—É–¥—å–±—ã
def ball_of_fate():
    ball_choice = choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    if ball_choice == 1:
        ball_answer = open("ball/var_one.png", 'rb')
        return ball_answer
    if ball_choice == 2:
        ball_answer = open("ball/var_two.png", 'rb')
        return ball_answer
    if ball_choice == 3:
        ball_answer = open("ball/var_tree.png", 'rb')
        return ball_answer
    if ball_choice == 4:
        ball_answer = open("ball/var_four.png", 'rb')
        return ball_answer
    if ball_choice == 5:
        ball_answer = open("ball/var_five.png", 'rb')
        return ball_answer
    if ball_choice == 6:
        ball_answer = open("ball/var_six.png", 'rb')
        return ball_answer
    if ball_choice == 7:
        ball_answer = open("ball/var_seven.png", 'rb')
        return ball_answer
    if ball_choice == 8:
        ball_answer = open("ball/var_eight.png", 'rb')
        return ball_answer
    if ball_choice == 9:
        ball_answer = open("ball/var_nine.png", 'rb')
        return ball_answer
    if ball_choice == 10:
        ball_answer = open("ball/var_ten.png", 'rb')
        return ball_answer
    if ball_choice == 11:
        ball_answer = open("ball/var_eleven.png", 'rb')
        return ball_answer


class Davinci:
    global saved_messages_davinci

    def __init__(self, bot, message, text):
        try:
            self.bot = bot
            self.message = message
            self.text = text
            openai.api_key = Davinci_key
            answer_davinci = open('davinci.txt', 'r', encoding='utf-8')
            saved_messages_davinci.insert(0, f'–í—ã: {self.text}\n')
            prompt_davinci = (str(answer_davinci.read()) + ''.join(reversed(saved_messages_davinci)))
            self.bot.send_message(message.chat.id, f'—Å–µ–∫—É–Ω–¥—É..')

            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=prompt_davinci,
                temperature=0.3,
                max_tokens=1000,
                top_p=1,
                frequency_penalty=0.0,
                presence_penalty=0.0,
            )
            self.bot.send_message(message.chat.id, f'{response["choices"][0]["text"]}')
            saved_messages_davinci.insert(0, f'{str(response["choices"][0]["text"])}\n')
            if len(saved_messages_davinci) >= 8:
                del saved_messages_davinci[3:]
        except Exception:
            self.bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –º–Ω–µ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–∫—É—Ä..")
            del saved_messages_davinci[1:]


class Artur:
    global saved_messages_artur

    def __init__(self, bot, message, text):
        try:
            self.bot = bot
            self.message = message
            self.text = text
            openai.api_key = Davinci_key
            answer_model = open('Artur.txt', 'r', encoding='utf-8')
            saved_messages_artur.insert(0, f'–í—ã: {self.text}\n')
            prompt_text = (str(answer_model.read()) + ''.join(reversed(saved_messages_artur)))
            self.bot.send_message(message.chat.id, f'—Å–µ–∫—É–Ω–¥—É..')
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=prompt_text,
                temperature=0.5,
                max_tokens=1000,
                top_p=0.3,
                frequency_penalty=0.5,
                presence_penalty=0.0,
            )
            self.bot.send_message(message.chat.id, f'{response["choices"][0]["text"]}')
            saved_messages_artur.insert(0, f'{str(response["choices"][0]["text"])}\n')
            if len(saved_messages_artur) >= 6:
                del saved_messages_artur[3:]
        except Exception:
            self.bot.send_message(message.chat.id, "–ó–∞–Ω–∏–º–∞–π—Å—è..")
            del saved_messages_artur[1:]



